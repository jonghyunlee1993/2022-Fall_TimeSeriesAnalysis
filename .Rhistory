# close(clip)
}
comp_auc_fib(df, pred, 6)
comp_auc_fib(df, pred, 7)
comp_auc_fib = function(df, pred, threshold){
df = df %>% mutate(target = ifelse(kPa_fib >= threshold, 1, 0))
our = roc(df$target, pred)
FIB4 = roc(df$target, df$FIB4)
APRI = roc(df$target, df$APRI)
plot(our, lty=1, main=paste("ROC of", threshold))
plot(FIB4, lty=2, add=TRUE)
plot(APRI, lty=3, add=TRUE)
legend(0.55, 0.35, legend=c("APRI", "FIB-4", "FR score"), lty=1:3)
# result_1 = roc.test(our, FIB4)
# result_2 = roc.test(our, APRI)
# result_3 = roc.test(FIB4, APRI)
#
# print(our$auc)
# cutoff = coords(our, x="best", input="threshold", best.method="youden")
# thres = round(cutoff$threshold, 4)
# print(paste0("Threshold: ", thres))
#
# # pred_label = ifelse(pred >= thres, 1, 0)
# # conf_mat = confusionMatrix(as.factor(pred_label), as.factor(df$target), positive="1")
# # print(conf_mat)
#
# p_value = cbind(result_1$p.value, result_2$p.value, result_3$p.value)
# adj_p = p.adjust(p_value, method="holm")
# my_table = round(adj_p, 4)
# clip <- pipe("pbcopy", "w")
# write.table(my_table, file=clip, sep='\t', row.names=FALSE)
# close(clip)
}
comp_auc_fib = function(df, pred, threshold){
df = df %>% mutate(target = ifelse(kPa_fib >= threshold, 1, 0))
our = roc(df$target, pred)
FIB4 = roc(df$target, df$FIB4)
APRI = roc(df$target, df$APRI)
plot(our, lty=1, main=paste("TE ROC of", threshold))
plot(FIB4, lty=2, add=TRUE)
plot(APRI, lty=3, add=TRUE)
legend(0.55, 0.35, legend=c("APRI", "FIB-4", "FR score"), lty=1:3)
# result_1 = roc.test(our, FIB4)
# result_2 = roc.test(our, APRI)
# result_3 = roc.test(FIB4, APRI)
#
# print(our$auc)
# cutoff = coords(our, x="best", input="threshold", best.method="youden")
# thres = round(cutoff$threshold, 4)
# print(paste0("Threshold: ", thres))
#
# # pred_label = ifelse(pred >= thres, 1, 0)
# # conf_mat = confusionMatrix(as.factor(pred_label), as.factor(df$target), positive="1")
# # print(conf_mat)
#
# p_value = cbind(result_1$p.value, result_2$p.value, result_3$p.value)
# adj_p = p.adjust(p_value, method="holm")
# my_table = round(adj_p, 4)
# clip <- pipe("pbcopy", "w")
# write.table(my_table, file=clip, sep='\t', row.names=FALSE)
# close(clip)
}
comp_auc_fib(df, pred, 8)
comp_auc_fib(df, pred, 10)
comp_auc_fib(df, pred, 15)
comp_auc_fib(df, pred, 16)
# MRE
df_mre = read.csv("~/Workspace/UltrasoundImageAnalysis/statistical_test/mre_predict_df.csv")
df_mre = df_mre %>% select(-c(ID)) %>% drop_na()
df_mre = df_mre %>% mutate(FIB4 = (AST * age) / (ALT * sqrt(PLT)),
APRI = (AST / 34) / PLT )
pred = predict(model, newdata=df_mre)
comp_auc_mre = function(df, pred, threshold){
df = df %>% mutate(target = ifelse(kPa_mre >= threshold, 1, 0))
our = roc(df$target, pred)
FIB4 = roc(df$target, df$FIB4)
APRI = roc(df$target, df$APRI)
print(our$auc)
cutoff = coords(our, x="best", input="threshold", best.method="youden")
thres = round(cutoff$threshold, 4)
print(paste0("Threshold: ", thres))
# print(our$auc)
# cutoff = coords(our, x="best", input="threshold", best.method="youden")
# thres = round(cutoff$threshold, 4)
# print(paste0("Threshold: ", thres))
#
# pred_label = ifelse(pred >= thres, 1, 0)
# conf_mat = confusionMatrix(as.factor(pred_label), as.factor(df$target), positive="1")
# print(conf_mat)
# result_1 = roc.test(our, FIB4)
# result_2 = roc.test(our, APRI)
# result_3 = roc.test(FIB4, APRI)
#
# p_value = cbind(result_1$p.value, result_2$p.value, result_3$p.value)
# adj_p = p.adjust(p_value, method="holm")
# my_table = round(adj_p, 4)
# clip <- pipe("pbcopy", "w")
# write.table(my_table, file=clip, sep='\t', row.names=FALSE)
# close(clip)
}
comp_auc_mre(df_mre, pred, 3.5)
comp_auc_mre = function(df, pred, threshold){
df = df %>% mutate(target = ifelse(kPa_mre >= threshold, 1, 0))
our = roc(df$target, pred)
FIB4 = roc(df$target, df$FIB4)
APRI = roc(df$target, df$APRI)
plot(our, lty=1, main=paste("MRE ROC of", threshold))
plot(FIB4, lty=2, add=TRUE)
plot(APRI, lty=3, add=TRUE)
legend(0.55, 0.35, legend=c("APRI", "FIB-4", "FR score"), lty=1:3)
# print(our$auc)
# cutoff = coords(our, x="best", input="threshold", best.method="youden")
# thres = round(cutoff$threshold, 4)
# print(paste0("Threshold: ", thres))
#
# pred_label = ifelse(pred >= thres, 1, 0)
# conf_mat = confusionMatrix(as.factor(pred_label), as.factor(df$target), positive="1")
# print(conf_mat)
# result_1 = roc.test(our, FIB4)
# result_2 = roc.test(our, APRI)
# result_3 = roc.test(FIB4, APRI)
#
# p_value = cbind(result_1$p.value, result_2$p.value, result_3$p.value)
# adj_p = p.adjust(p_value, method="holm")
# my_table = round(adj_p, 4)
# clip <- pipe("pbcopy", "w")
# write.table(my_table, file=clip, sep='\t', row.names=FALSE)
# close(clip)
}
comp_auc_mre(df_mre, pred, 2)
comp_auc_mre(df_mre, pred, 3.5)
comp_auc_mre(df_mre, pred, 5)
A = matrix(c(5, 4, 4, 2, -3, 1, 3, 7, 2), byrow=TRUE, nrow=3)
A
B = matrix(c(1, 0, 1, 0, 1, 0, 1, 2, 3), byrow=TRUE, nrow=3)
A * B
A %*% B
det(AB)
AB = A %*% B
AB
det(AB)
det_A = det(A)
det_B = det(B)
det_A * det_B
A = matrix(c(5, 4, 4, 2, -3, 1, 3, 7, 2), byrow=TRUE, nrow=3)
B = matrix(c(1, 0, 1, 0, 1, 0, 1, 2, 3), byrow=TRUE, nrow=3)
AB = A %*% B
AB
det(AB)
det_A = det(A)
det_B = det(B)
det_A * det_B
A = matrix(c(1, 2, 0, 0, 4, 0, 0, 0, 1), byrow=TRUE, nrow=3)
A
inv(A)
solve(A)
solve(A) %*% c(15, 12, 8)
solve(A) %*% c(5, 1, 2)
solve(A) %*% c(15, 12, 8) / solve(A) %*% c(5, 1, 2)
A = matrix(c(1, 2, 0, 5, 4, 0, 1, 0, 1), byrow=TRUE, nrow=3)
solve(A)
7/8
5/6
1/6
c(-1, -2, 0) %*% solve(A) %*% c(1, 0, 0)
c(-1, -2, 0) %*% solve(A) %*% c(0, 1, 0)
c(-1, -2, 0) %*% solve(A) %*% c(3, 2, 1)
solve(A) %*% c(15, 12, 8)
solve(A) %*% c(3, 2, 1)
7/8
5/6
1/6
7/3
solve(A) %*% c(15, 12, 8) / solve(A) %*% c(3, 2, 1)
1/6
5/6
6/7
7/8
8/9
A = matrix(c(3, 2, 0, 2, 4, 0, 1, 0, 1), byrow=TRUE, nrow=3)
solve(A)
c(-2, -2, 0) %*% solve(A) %*% c(1, 0, 0)
c(-2, -2, 0) %*% solve(A) %*% c(0, 1, 0)
c(-2, -2, 0) %*% solve(A) %*% c(5, 1, 2)
solve(A) %*% c(15, 12, 8)
solve(A) %*% c(15, 12, 8) / solve(A) %*% c(5, 1, 2)
solve(A)
1/6
1/5
1/3
1/3.5
solve(A) %*% c(15, 12, 8) / solve(A) %*% c(5, 1, 2)
solve(A) %*% c(5, 1, 2)
solve(A) %*% c(15, 12, 8)
solve(A) %*% c(5, 1, 2)
solve(A) %*% c(15, 12, 8) / solve(A) %*% c(5, 1, 2)
c(15, 12, 8) / c(2, 4, 0)
c(9, 3, 8) / c(9/2, 1/4, 2)
A = matrix(c(3,2,5,2,4,1,1,0,2), byrow=TRUE, nrow=3)
solve(A)
c(-2, -2, -1) %*% solve(A) %*% c(1, 0, 0)
c(-2, -2, -1) %*% solve(A) %*% c(0,  1, 0)
c(-2, -2, -1) %*% solve(A) %*% c(0, 0, 1)
c(-2, -2, -1) %*% solve(A) %*% c(1, 0, 0)
c(-2, -2, -1) %*% solve(A) %*% c(1, 0, 0)
A = matrix(c(3,2,5,2,4,1,1,0,2), byrow=TRUE, nrow=3)
solve(A)
solve(A) %*% c(15, 12, 8)
23 + 26 - 35
23 + 26 - 36
install.packages(dynpred)
install.packages("dynpred")
library(dynpred)
data(ova)
Surv(tyears, d)
model = (Surv(tyears, d) ~ Karn + Diam, data=ova)
cindex(Surv(tyears, d) ~ Karn + Diam, data=ova)
survfit(Surv(tyears, d) ~ Karn + Diam, data=ova)
model = survfit(Surv(tyears, d) ~ Karn + Diam, data=ova)
summary(model)
model = survfit(Surv(tyears, d) ~ Diam, data=ova)
summary(model)
cindex(model)
model = survfit(Surv(tyears, d) ~ Diam, data=ova)
cindex(model)
cindex(Surv(tyears, d) ~ Diam, data=ova)
cox = coxph(Surv(tyears, d) ~ Diam, data=ova)
summary(cox)
rm(list=ls())
setwd("~/Workspace/2022-Fall_TimeSeriesAnalysis/")
par(family="AppleGothic")
library(forecast)
library(lubridate)
# Example 4.3
z = scan("data/food.txt")
food = ts(z, start=c(1981, 1), frequency=12)
m = decompose(food, type=c("additive"))
m
# Example 4.1
z = scan("data/food.txt")
t = 1:length(z)
food = ts(z, start=c(1981, 1),frequency=12)
fit = lm(food ~ t)
anova(fit)
trend = fitted(fit)
ts.plot(food, trend, col=1:2, lty=1:2, ylab="food", xlab="time",
main="그림 4-1 원시계열과 분해법에 의한 추세성분")
legend("topleft", lty=1:2, col=1:2, c("원시계열", "추세성분"))
adjtrend = food / trend
ts.plot(food, trend, col=1:2, lty=1:2, ylab="food", xlab="time",
main="그림 4-1 원시계열과 분해법에 의한 추세성분")
adjtrend = food / trend
y = factor(cycle(adjtrend))
fit1 = auto.arima(adjtrend, max.p=2, xreg=model.matrix(~ 0 + y)[, -12],
seasonal=F, max.d=0, max.q=0)
fit1
seasonal = fit1$fitted
pred = trend * seasonal
irregular = food / pred
ts.plot(seasonal, main="그림 4-2 분해법에 의한 계절성분")
seasonal
y
ts.plot(irregular, main="그림 4-3 분해법에 의한 불규칙성분")
acf(irregular, main="불규칙 성분의 ACF")
ts.plot(food, pred, lty=1:2, ylab="food", col=c("blue", "red"),
main="그림 4-4 원시계열과 예측값")
legend("topleft", lty=1:2, col=c("blue", "red"),
c("원시계열", "예측값"))
date = ymd("810101") + months(1:length(food) - 1)
table4 = data.frame(date, food, trend, seasonal, irregular)
table4
# Exercise 4.4
z = scan("data/build.txt")
food = ts(z, start=c(1981, 1), frequency=12)
m = decompose(build, type=c("additive"))
trend = trendcycle(m)
seasonal = seasonal(m)
irregular = remainder(m)
adjseasonal = food - seasonal
adjseasonal = build - seasonal
# Exercise 4.4
z = scan("data/build.txt")
build = ts(z, start=c(1981, 1), frequency=12)
m = decompose(build, type=c("additive"))
trend = trendcycle(m)
seasonal = seasonal(m)
irregular = remainder(m)
adjseasonal = build - seasonal
ts.plot(build, adjseasonal, ylab="food", lty=1:2, col=c("blue", "red"),
main="원시계열과 계절 조정")
legend("topleft", lty=1:2, col=c("blue", "red"), c("원시계열", "계절조정"))
# Exercise 4.4 - 2
z = scan("data/export.txt")
export = ts(z, start=c(1981, 1), frequency=12)
m = decompose(build, type=c("additive"))
trend = trendcycle(m)
seasonal = seasonal(m)
irregular = remainder(m)
adjseasonal = export - seasonal
ts.plot(export, adjseasonal, ylab="food", lty=1:2, col=c("blue", "red"),
main="원시계열과 계절 조정")
legend("topleft", lty=1:2, col=c("blue", "red"), c("원시계열", "계절조정"))
m = decompose(export, type=c("additive"))
trend = trendcycle(m)
seasonal = seasonal(m)
irregular = remainder(m)
adjseasonal = export - seasonal
ts.plot(export, adjseasonal, ylab="food", lty=1:2, col=c("blue", "red"),
main="원시계열과 계절 조정")
legend("topleft", lty=1:2, col=c("blue", "red"), c("원시계열", "계절조정"))
# Exercise 4.4 - 3
z = scan("data/usapass.txt")
usapass = ts(z, start=c(1981, 1), frequency=12)
m = decompose(usapass, type=c("additive"))
trend = trendcycle(m)
seasonal = seasonal(m)
irregular = remainder(m)
adjseasonal = usapass - seasonal
ts.plot(usapass, adjseasonal, ylab="food", lty=1:2, col=c("blue", "red"),
main="원시계열과 계절 조정")
legend("topleft", lty=1:2, col=c("blue", "red"), c("원시계열", "계절조정"))
# Exercise 4.4 - 4
z = scan("data/depart.txt")
depart = ts(z, start=c(1981, 1), frequency=12)
m = decompose(depart, type=c("additive"))
trend = trendcycle(m)
seasonal = seasonal(m)
irregular = remainder(m)
adjseasonal = depart - seasonal
ts.plot(depart, adjseasonal, ylab="food", lty=1:2, col=c("blue", "red"),
main="원시계열과 계절 조정")
legend("topleft", lty=1:2, col=c("blue", "red"), c("원시계열", "계절조정"))
# Exercise 4.4 - 4
z = scan("data/koreapass.txt")
koreapass = ts(z, start=c(1981, 1), frequency=12)
m = decompose(koreapass, type=c("additive"))
trend = trendcycle(m)
seasonal = seasonal(m)
irregular = remainder(m)
adjseasonal = koreapass - seasonal
ts.plot(koreapass, adjseasonal, ylab="food", lty=1:2, col=c("blue", "red"),
main="원시계열과 계절 조정")
legend("topleft", lty=1:2, col=c("blue", "red"), c("원시계열", "계절조정"))
fit1
rm(list=ls())
setwd("~/Workspace/2022-Fall_TimeSeriesAnalysis/")
par(family="AppleGothic")
library(forecast)
library(lubridate)
# Example 4.1
z = scan("data/food.txt")
t = 1:length(z)
food = ts(z, start=c(1981, 1),frequency=12)
fit = lm(food ~ t)
anova(fit)
trend = fitted(fit)
ts.plot(food, trend, col=1:2, lty=1:2, ylab="food", xlab="time",
main="그림 4-1 원시계열과 분해법에 의한 추세성분")
legend("topleft", lty=1:2, col=1:2, c("원시계열", "추세성분"))
anova(fit)
trend = fitted(fit)
ts.plot(food, trend, col=1:2, lty=1:2, ylab="food", xlab="time",
main="그림 4-1 원시계열과 분해법에 의한 추세성분")
legend("topleft", lty=1:2, col=1:2, c("원시계열", "추세성분"))
adjtrend = food / trend
y = factor(cycle(adjtrend))
fit1 = auto.arima(adjtrend, max.p=2, xreg=model.matrix(~ 0 + y)[, -12],
seasonal=F, max.d=0, max.q=0)
fit1
seasonal = fit1$fitted
pred = trend * seasonal
irregular = food / pred
ts.plot(seasonal, main="그림 4-2 분해법에 의한 계절성분")
ts.plot(irregular, main="그림 4-3 분해법에 의한 불규칙성분")
acf(irregular, main="불규칙 성분의 ACF")
ts.plot(food, pred, lty=1:2, ylab="food", col=c("blue", "red"),
main="그림 4-4 원시계열과 예측값")
legend("topleft", lty=1:2, col=c("blue", "red"),
c("원시계열", "예측값"))
date = ymd("810101") + months(1:length(food) - 1)
table4 = data.frame(date, food, trend, seasonal, irregular)
table4
# Example 4.2
z = scan("data/mindex.txt")
mindex = ts(z, start=c(1986, 1), frequency=12)
m3 = ma(mindex, 3)
m7 = ma(mindex, 7)
plot(mindex, lty=1, main="그림 4-5 중간재 출하지수와 이동평균 m=3")
lines(m3, lwd=1, col="red", lty=2)
legend("topleft", lty=1:2, col=c(1, "red"), c("index", "MA3"))
plot(mindex, lty=1, main="그림 4-6 중간재 출하지수와 이동평균 m=7")
lines(m7, lwd=1, col="blue", lty=2)
legend("topleft", lty=1:2, col=c(1, "red"), c("index", "MA7"))
# Example 4.3
z = scan("data/food.txt")
food = ts(z, start=c(1981, 1), frequency=12)
m = decompose(food, type=c("additive"))
trend = trendcycle(m)
seasonal = seasonal(m)
irregular = remainder(m)
adjseasonal = food - seasonal
ts.plot(food, trend, ylab="food", lty=1:2, col=c("blue", "red"),
main="그림 4-7 원시계열과 추세, 순환 성분")
legend("topleft", lty=1:2, col=c("blue", "red"), c("원시계열", "추세, 순환"))
ts.plot(food, seasonal, ylab="food", lty=1:2, col=c("blue", "red"),
main="그림 4-8 원시계열과 계졀 성분")
legend("topleft", lty=1:2, col=c("blue", "red"), c("원시계열", "계절성분"))
ts.plot(food, irregular, ylab="food", lty=1:2, col=c("blue", "red"),
main="그림 4-9 원시계열과 불규칙 성분")
legend("topleft", lty=1:2, col=c("blue", "red"), c("원시계열", "불규칙성분"))
ts.plot(food, adjseasonal, ylab="food", lty=1:2, col=c("blue", "red"),
main="그림 4-10 원시계열과 계절 조정")
legend("topleft", lty=1:2, col=c("blue", "red"), c("원시계열", "계절조정"))
ts.plot(food, adjseasonal, ylab="food", lty=1:2, col=c("blue", "red"),
main="그림 4-10 원시계열과 계절 조정")
legend("topleft", lty=1:2, col=c("blue", "red"), c("원시계열", "계절조정"))
# Exercise 4.4 - 1
z = scan("data/build.txt")
build = ts(z, start=c(1981, 1), frequency=12)
m = decompose(build, type=c("additive"))
trend = trendcycle(m)
seasonal = seasonal(m)
irregular = remainder(m)
adjseasonal = build - seasonal
ts.plot(build, adjseasonal, ylab="build", lty=1:2, col=c("blue", "red"),
main="원시계열과 계절 조정")
legend("topleft", lty=1:2, col=c("blue", "red"), c("원시계열", "계절조정"))
# Exercise 4.4 - 2
z = scan("data/export.txt")
export = ts(z, start=c(1981, 1), frequency=12)
m = decompose(export, type=c("additive"))
trend = trendcycle(m)
seasonal = seasonal(m)
irregular = remainder(m)
adjseasonal = export - seasonal
ts.plot(export, adjseasonal, ylab="export", lty=1:2, col=c("blue", "red"),
main="원시계열과 계절 조정")
legend("topleft", lty=1:2, col=c("blue", "red"), c("원시계열", "계절조정"))
# Exercise 4.4 - 3
z = scan("data/usapass.txt")
usapass = ts(z, start=c(1981, 1), frequency=12)
m = decompose(usapass, type=c("additive"))
trend = trendcycle(m)
seasonal = seasonal(m)
irregular = remainder(m)
adjseasonal = usapass - seasonal
ts.plot(usapass, adjseasonal, ylab="usapass", lty=1:2, col=c("blue", "red"),
main="원시계열과 계절 조정")
legend("topleft", lty=1:2, col=c("blue", "red"), c("원시계열", "계절조정"))
# Exercise 4.4 - 4
z = scan("data/depart.txt")
depart = ts(z, start=c(1981, 1), frequency=12)
m = decompose(depart, type=c("additive"))
trend = trendcycle(m)
seasonal = seasonal(m)
irregular = remainder(m)
adjseasonal = depart - seasonal
ts.plot(depart, adjseasonal, ylab="depart", lty=1:2, col=c("blue", "red"),
main="원시계열과 계절 조정")
legend("topleft", lty=1:2, col=c("blue", "red"), c("원시계열", "계절조정"))
# Exercise 4.4 - 5
z = scan("data/koreapass.txt")
koreapass = ts(z, start=c(1981, 1), frequency=12)
m = decompose(koreapass, type=c("additive"))
trend = trendcycle(m)
seasonal = seasonal(m)
irregular = remainder(m)
adjseasonal = koreapass - seasonal
ts.plot(koreapass, adjseasonal, ylab="koreapass", lty=1:2, col=c("blue", "red"),
main="원시계열과 계절 조정")
legend("topleft", lty=1:2, col=c("blue", "red"), c("원시계열", "계절조정"))
# Example 4.1
z = scan("data/food.txt")
t = 1:length(z)
food = ts(z, start=c(1981, 1),frequency=12)
fit = lm(food ~ t)
anova(fit)
acf(adjtrend)
library(lmtest)
dwtest(adjtrend)
temp_lm = lm(adjtrend ~ y + 0)
dwtest(temp_lm)
acf(irregular, main="불규칙 성분의 ACF")
z = scan("data/food.txt")
t = 1:length(z)
food = ts(z, start=c(1981, 1),frequency=12)
fit = lm(food ~ t)
anova(fit)
trend = fitted(fit)
ts.plot(food, trend, col=1:2, lty=1:2, ylab="food", xlab="time",
main="그림 4-1 원시계열과 분해법에 의한 추세성분")
legend("topleft", lty=1:2, col=1:2, c("원시계열", "추세성분"))
adjtrend = food / trend
y = factor(cycle(adjtrend))
temp_lm = lm(adjtrend ~ y + 0)
dwtest(temp_lm)
fit1 = auto.arima(adjtrend, max.p=2, xreg=model.matrix(~ 0 + y)[, -12],
seasonal=F, max.d=0, max.q=0)
fit1
seasonal = fit1$fitted
pred = trend * seasonal
irregular = food / pred
ts.plot(seasonal, main="그림 4-2 분해법에 의한 계절성분")
ts.plot(irregular, main="그림 4-3 분해법에 의한 불규칙성분")
acf(irregular, main="불규칙 성분의 ACF")
par(family="AppleGothic")
acf(irregular, main="불규칙 성분의 ACF")
date = ymd("810101") + months(1:length(food) - 1)
table4 = data.frame(date, food, trend, seasonal, irregular)
table4
table4
table4
