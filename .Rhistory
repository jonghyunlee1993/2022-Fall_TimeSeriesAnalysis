}
ggplot(data=results, aes(x=lag, y=acf)) +
geom_bar(stat='identity', width=0.2) +
ggtitle("SACF plot")
}
draw_SACF(Z_1)
custom_SACF = function(Z, k) {
N = length(Z)
Z_mean = mean(Z)
Z_var = sum((Z - Z_mean)^2) / N
term_1 = Z[1:(N-k)] - Z_mean
term_2 = Z[(1+k):N] - Z_mean
u = sum(term_1 * term_2) / N
return (u / Z_var)
}
draw_SACF(Z_1)
draw_SACF(Z_2)
draw_SACF = function(Z) {
results = as.data.frame(
matrix(nrow=20, ncol=2)
)
colnames(results) = c("lag", "acf")
for (i in 1:20){
results[i, 1] = i
results[i, 2] = custom_SACF(Z, i)
}
plot(results$lag, results$acf)
# ggplot(data=results, aes(x=lag, y=acf)) +
#   geom_bar(stat='identity', width=0.2) +
#   ggtitle("SACF plot")
}
draw_SACF(Z_1)
draw_SACF(Z_2)
acf(Z_1)
pacf(Z_1)
draw_SACF = function(Z) {
results = as.data.frame(
matrix(nrow=20, ncol=2)
)
colnames(results) = c("lag", "acf")
for (i in 1:20){
results[i, 1] = i
results[i, 2] = custom_SACF(Z, i)
}
ggplot(data=results, aes(x=lag, y=acf)) +
geom_bar(stat='identity', width=0.2) +
ggtitle("SACF plot")
}
draw_SACF(Z_1)
draw_SACF(Z_2)
draw_SPACF(Z_1)
draw_SPACF(Z_2)
X
lagmat(Z_1, 5)
A = matrix(c(1, 0, 0, 1), nrow=2, byrow=TRUE)
A
-3 - c(-1, 2) %*% solve(A) %*% c(-1, 2)
-3 - c(0, 0) %*% solve(A) %*% c(-1, 2)
-1 - c(0, 0) %*% solve(A) %*% c(-1, 1)
-3 - c(0, 0) %*% solve(A) %*% c(2, -1)
solve(A) %*% c(20, 10)
solve(A) %*% c(-1, 2)
solve(A) %*% c(20, 10) / solve(A) %*% c(-1, 2)
A = matrix(c(-1, 0, 2, 1), nrow=2, byrow=TRUE)
A
0 - c(-3, 0) %*% solve(A) %*% c(1,0)
-1 - c(-3, 0) %*% solve(A) %*% c(-1, 1)
-3 - c(-3, 0) %*% solve(A) %*% c(2, -1)
solve(A) %*% c(20, 10)
solve(A) %*% c(-1, 2)
solve(A) %*% c(3, -1)
solve(A) %*% c(2, -1)
solve(A) %*% c(20, 10) / solve(A) %*% c(2, -1)
A = matrix(c(2, 0, -1, 1), nrow=2, byrow=TRUE)
A
-2 - c(-3, 0) %*% solve(A) %*% c(2, -1)
A = matrix(c(-1, 0, 2, 1), nrow=2, byrow=TRUE)
A
0 - c(-3, 0) %*% solve(A) %*% c(1,0)
-1 - c(-3, 0) %*% solve(A) %*% c(-1, 1)
-2 - c(-3, 0) %*% solve(A) %*% c(2, -1)
solve(A) %*% c(20, 10)
solve(A) %*% c(2, -1)
solve(A) %*% c(20, 10) / solve(A) %*% c(-1, 2)
solve(A) %*% c(20, 10) / solve(A) %*% c(2, -1)
A = matrix(c(2, 0, -1, 1), nrow=2, byrow=TRUE)
A
0 - c(-2, 0) %*% solve(A) %*% c(1,0)
-1 - c(-2, 0) %*% solve(A) %*% c(-1, 1)
-3 - c(-2, 0) %*% solve(A) %*% c(-1, 2)
solve(A) %*% c(20, 10)
solve(A) %*% c(-1, 2)
solve(A) %*% c(20, 10) / solve(A) %*% c(-1, 2)
A = matrix(c(-1, -1, 2, 1), nrow=2, byrow=TRUE)
A
-2 - c(-3, -1) %*% solve(A) %*% c(2, -1)
0 - c(-3, -1) %*% solve(A) %*% c(1, 0)
0 - c(-3, -1) %*% solve(A) %*% c(0, 1)
solve(A) %*% c(20, 10)
solve(A) %*% c(2, -1)
solve(A) %*% c(20, 10) / solve(A) %*% c(2, -1)
A = matrix(c(-1, 2, 2, -1), nrow=2, byrow=TRUE)
A
-1 - c(-3, -2) %*% solve(A) %*% c(-1, 1)
0 - c(-3, -2) %*% solve(A) %*% c(1, 0)
0 - c(-3, -2) %*% solve(A) %*% c(0, 1)
solve(A) %*% c(20, 10)
solve(A) %*% c(-1, 1)
solve(A) %*% c(20, 10) / solve(A) %*% c(-1, 1)
A = matrix(c(3, 1, -1, -3, 2, 0, 1, 1, 0), nrow=2, byrow=TRUE)
A
A = matrix(c(3, 1, -1, -3, 2, 0, 1, 1, 0), nrow=3, byrow=TRUE)
A
c(3, 2, 0) %*% solve(A)
solve(A) %*% c(10, 6, 6)
A = matrix(c(3, 1, -1, -3, 2, 0, 0, 1, 0), nrow=3, byrow=TRUE)
A
A = matrix(c(3, -3, 1, 1, 2, 1, 0, 1, 0), nrow=3)
A
solve(A) %*% c(10, 6, 6)
A = matrix(c(3, -3, 1, 1, 2, 1, 0, 0, =1), nrow=3)
A
A = matrix(c(3, -3, 1, 1, 2, 1, 0, 0, -1), nrow=3)
A
solve(A) %*% c(10, 6, 6)
A = matrix(c(3, -3, 1, 1, 2, 1, -1, 0, 0), nrow=3)
A
solve(A) %*% c(10, 6, 6)
c(3, 2, 0) %*% solve(A) %*% c(10, 6, 6)
A = matrix(c(3, -3, 1, 1, 2, 1, 0, 1, 0), nrow=3)
A
solve(A) %*% c(10, 6, 6)
# solve(A) %*% c(10, 6, 6)
c(3, 2, 0) %*% solve(A) %*% c(10, 6, 6)
A = matrix(c(3, -3, 1, 1, 2, 1, 0,0,-1), nrow=3)
A
# solve(A) %*% c(10, 6, 6)
c(3, 2, 0) %*% solve(A) %*% c(10, 6, 6)
A = matrix(c(3, -3, 1, 1, 2, 1, -1, 0, 0), nrow=3)
A
# solve(A) %*% c(10, 6, 6)
c(2,6,0) %*% solve(A) %*% c(10, 6, 6)
# solve(A) %*% c(10, 6, 6)
c(2,6,0) %*% solve(A)
# solve(A) %*% c(10, 6, 6)
c(0,6,0) %*% solve(A)
# solve(A) %*% c(10, 6, 6)
c(0,6,0) %*% solve(A) %*% c(10, 6, 6)
A = matrix(c(1, 2, 1, -1, 0, 0, 0, 1, 0), nrow=3)
A
# solve(A) %*% c(10, 6, 6)
c(0,6,0) %*% solve(A) %*% c(10, 6, 6)
A = matrix(c(1, 2, 1,  0, 1, 0, 0, 0, -1), nrow=3)
A
# solve(A) %*% c(10, 6, 6)
c(0,6,0) %*% solve(A) %*% c(10, 6, 6)
A = matrix(c(1, 0, 0, 1), nrow=2)
A
solve(A) %*% c(20, 10)
solve(A) %*% c(-1, 2)
solve(A) %*% c(20, 10) / solve(A) %*% c(-1, 2)
0 - c(-3, 0) %*% solve(A) %*% c(1, 0)
-1 - c(-3, 0) %*% solve(A) %*% c(-1, 1)
-2 - c(-3, 0) %*% solve(A) %*% c(2, -1)
solve(A) %*% c(20, 10)
solve(A) %*% c(-1, 1)
A = matrix(c(-1, 1, 0, 1), nrow=2)
A
0 - c(-1, 0) %*% solve(A) %*% c(1, 0)
-3 - c(-1, 0) %*% solve(A) %*% c(-1, 2)
-2 - c(-1, 0) %*% solve(A) %*% c(2, -1)
solve(A) %*% c(20, 10)
solve(A) %*% c(2, -1)
solve(A) %*% c(20, 10) / solve(A) %*% c(2, -1)
A = matrix(c(2, -1, 0, 1), nrow=2)
A
0 - c(-2, 0) %*% solve(A) %*% c(1, 0)
-3 - c(-2, 0) %*% solve(A) %*% c(-1, 2)
-1 - c(-2, 0) %*% solve(A) %*% c(-1, 1)
solve(A) %*% c(20, 10)
solve(A) %*% c(2, -1)
solve(A) %*% c(-1, 2)
A = matrix(c(2, 0, 1, 0, 1, 0, 0, 0, 1), nrow=3)
A
solve(A) %*% c(8, 5, 4)
A = matrix(c(2, 0, 1, 0, 1, 0, 0, 0, 1), nrow=3)
A
-1 - c(4, 0, 0) %*% solve(A) %*% c(1, 1, -1)
0 - c(4, 0, 0) %*% solve(A) %*% c(1, 0, 0)
solve(A) %*% c(1, 1, -1)
solve(A) %*% c(8, 5, 4) / solve(A) %*% c(1, 1, -1)
A = matrix(c(2, 0, 1, 0, 1, 0, 1, 1, -1), nrow=3)
A
0 - c(4, 0, -1) %*% solve(A) %*% c(0, 0, 1)
0 - c(4, 0, -1) %*% solve(A) %*% c(1, 0, 0)
solve(A) %*% c(8, 5, 4)
solve(A) %*% c(0, 0, 1)
solve(A) %*% c(8, 5, 4) / solve(A) %*% c(0, 0, 1)
A = matrix(c(2, 0, 1, 1, 1, -1, 0, 1, 0), nrow=3)
A
0 - c(4, -1, 0) %*% solve(A) %*% c(1, 0, 0)
0 - c(4, -1, 0) %*% solve(A) %*% c(0, 0, 1)
solve(A) %*% c(8, 5, 4)
solve(A) %*% c(1, 0, 0)
solve(A) %*% c(8, 5, 4) / solve(A) %*% c(0, 0, 1)
A = matrix(c(2, 0, 1, 0, 1, 0, 0, 0, 1), nrow=3)
A
-1 - c(4, 0, 0) %*% solve(A) %*% c(1, 1, -1)
0 - c(4, 0, 0) %*% solve(A) %*% c(1, 0, 0)
A = matrix(c(2, 0, 1, 1, 0, 0, 0, 0, 1), nrow=3)
A
-1 - c(4, 0, 0) %*% solve(A) %*% c(1, 1, -1)
A = matrix(c(3, -3, 1, 1, 2, 1, -1, 0, 0), nrow=3)
A
0 - c(3, 2, 0) %*% solve(A) %*% c(0, 1, 0)
0 - c(3, 2, 0) %*% solve(A) %*% c(0, 0, 1)
solve(A) %*% c(10, 6, 6)
solve(A) %*% c(0, 0, 1)
solve(A) %*% c(10, 6, 6) / solve(A) %*% c(0, 0, 1)
A = matrix(c(3, -3, 1, 1, 2, 1, 0, 0, -1), nrow=3)
A
0 - c(3, 2, 0) %*% solve(A) %*% c(0, 1, 0)
0 - c(3, 2, 0) %*% solve(A) %*% c(0, 0, -1)
0 - c(3, 2, 0) %*% solve(A) %*% c(-1, 0, 0)
0 - c(3, 2, 0) %*% solve(A) %*% c(0, 0, -1)
A = matrix(c(1, 2, 1, -1, 0, 0, 0, 1 , 0), nrow=3)
A
3 - c(2, 0, 0) %*% solve(A) %*% c(3, -3, 1)
0 - c(2, 0, 0) %*% solve(A) %*% c(0, 0, -1)
solve(A) %*% c(10, 6, 6)
A = matrix(c(1, 2, 1, -1, 0, 0, 0, 0, 0, -1), nrow=3)
A
3 - c(2, 0, 0) %*% solve(A) %*% c(3, -3, 1)
0 - c(2, 0, 0) %*% solve(A) %*% c(0, 1, 0)
A = matrix(c(1, 2, 1, -1, 0, 0, 0, 0, -1), nrow=3)
A
3 - c(2, 0, 0) %*% solve(A) %*% c(3, -3, 1)
0 - c(2, 0, 0) %*% solve(A) %*% c(0, 1, 0)
solve(A) %*% c(10, 6, 6)
0 - c(2, 0, 0) %*% solve(A) %*% c(0, 1, 0)
solve(A) %*% c(0, 0, -1)
solve(A) %*% c(10, 6, 6) / solve(A) %*% c(0, 0, -1)
A = matrix(c(1, 2, 1, 0, 1, 0, 0, 0, -1), nrow=3)
A
3 - c(2, 0, 0) %*% solve(A) %*% c(3, -3, 1)
0 - c(2, 0, 0) %*% solve(A) %*% c(-1, 0, 0)
solve(A) %*% c(10, 6, 6)
solve(A) %*% c(3, -3, 1)
solve(A) %*% c(10, 6, 6) / solve(A) %*% c(3, -3, 1)
A = matrix(c(3, -3, 1, 1, 2, 1, 0, 0, -1), nrow=3)
A
0 - c(3, 2, 0) %*% solve(A) %*% c(-1, 0, 0)
0 - c(3, 2, 0) %*% solve(A) %*% c(0, 1, 0)
solve(A) %*% c(10, 6, 6)
solve(A) %*% c(0, 1, 0)
solve(A) %*% c(10, 6, 6) / solve(A) %*% c(0, 1, 0)
A = matrix(c(1, 2, 1,-1, 0,0, 0, 1, 0), nrow=3)
A
c(2, 0, 0) %*% solve(A)
B = matrix(c(3, -3, 1, 1, 2, 1, -1, 0, 0, 0, 1, 0, 0, 0, -1), nrow=3)
B
c(2, 0, 0) %*% solve(A) %*% B
solve(A) %*% c(10, 6, 6)
A = matrix(c(1, 0, 0, 1), nrow=2)
A
0 - c(0, 0) %*% solve(A) %*% c(-1, 2)
0 - c(0, 0) %*% solve(A) %*% c(-1, 1)
0 - c(0, 0) %*% solve(A) %*% c(2, -1)
-3 - c(0, 0) %*% solve(A) %*% c(-1, 2)
-1 - c(0, 0) %*% solve(A) %*% c(-1, 1)
-2 - c(0, 0) %*% solve(A) %*% c(2, -1)
solve(A) %*% c(20, 10)
solve(A) %*% c(20, 10) / solve(A) %*% c(-1, 2)
-1 - c(-3, 0) %*% solve(A) %*% c(-1, 1)
-2 - c(-3, 0) %*% solve(A) %*% c(2, -1)
0 - c(-3, 0) %*% solve(A) %*% c(1, 0)
solve(A) %*% c(20, 10)
solve(A) %*% c(-1, 1)
solve(A) %*% c(20, 10) / solve(A) %*% c(-1, 1)
A = matrix(c(-1, 1, 0, 1), nrow=2)
-3 - c(-1, 0) %*% solve(A) %*% c(-1, 2)
-2 - c(-1, 0) %*% solve(A) %*% c(-1, 1)
0 - c(-1, 0) %*% solve(A) %*% c(1, 0)
-2 - c(-1, 0) %*% solve(A) %*% c(2, -1)
solve(A) %*% c(20, 10) / solve(A) %*% c(2, -1)
A = matrix(c(2, -1, 0, 1), nrow=2)
A
-3 - c(-2, 0) %*% solve(A) %*% c(-1, 2)
-1 - c(-2, 0) %*% solve(A) %*% c(-1, 1)
0 - c(-2, 0) %*% solve(A) %*% c(1, 0)
A = matrix(c(1, 0, 0, 1), nrow=2)
A
solve(A) %*% c(20, 10)
solve(A) %*% c(-1, 2)
solve(A) %*% c(20, 10) / solve(A) %*% c(-1, 2)
A = matrix(c(1, 0, 1, 2), nrow=2)
A
0 - c(0, -3) %*% solve(A) %*% c(0, 1)
-1 - c(0, -3) %*% solve(A) %*% c(-1, 1)
-2 - c(0, -3) %*% solve(A) %*% c(2, -1)
solve(A) %*% c(20, 10)
solve(A) %*% c(2, -1)
solve(A) %*% c(20, 10) / solve(A) %*% c(2, -1)
0 - c(0, -3) %*% solve(A) %*% c(0, 1)
-1 - c(0, -3) %*% solve(A) %*% c(-1, 1)
-2 - c(0, -3) %*% solve(A) %*% c(2, -1)
solve(A) %*% c(20, 10) / solve(A) %*% c(2, -1)
A = matrix(c(1, 2, 1, 0), nrow=2)
A
solve(A) %*% c(20, 10) / solve(A) %*% c(2, -1)
solve(A)
solve(A) %*% c(20, 10)
solve(A) %*% c(20, 10)
A = matrix(c(1, 2, 2, -1), nrow=2)
A
-1 - c(-3, -2) %*% solve(A) %*% c(-1, 1)
0 - c(-3, -2) %*% solve(A) %*% c(1, 0)
0 - c(-3, -2) %*% solve(A) %*% c(0, 1)
solve(A) %*% c(20, 10)
solve(A) %*% c(-1, 1)
A = matrix(c(-1, 1, 2, -1), nrow=2)
A
-3 - c(-1, -2) %*% solve(A) %*% c(1, 2)
0 - c(-1, -2) %*% solve(A) %*% c(1, 0)
0 - c(-1, -2) %*% solve(A) %*% c(0, 1)
solve(A) %*% c(20, 10)
solve(A)
c(-1, -2) %*% matrix(c(1, 1, 2, 1), nrow=2) %*% matrix(c(1, 2, -1, 1, 2, -1, 1, 0, 0, 1), nrow=2)
A = matrix(c(2, 0, 1, 1, 0, 0, 0, 1, 0), nrow=3)
A
-1 - c(4, 0, 0) %*% solve(A) %*% c(1, 1, -1)
0 - c(4, 0, 0) %*% solve(A) %*% c(0, 0, 1)
solve(A) %*% c(8, 5, 4) / solve(A) %*% c(0, 0, 1)
A = matrix(c(2, 0, 1, 0, 1, 0, 0, 0, 1), nrow=3)
A
-1 - c(4, 0, 0) %*% solve(A) %*% c(1, 1, -1)
0 - c(4, 0, 0) %*% solve(A) %*% c(1, 0, 0)
solve(A) %*% c(8, 5, 4) / solve(A) %*% c(1, 1, -1)
A = matrix(c(2, 0, 1, 1, 1, -1, 0, 1, 0), nrow=3)
A
0 - c(4, -1, 0) %*% solve(A) %*% c(1, 0, 0)
0 - c(4, -1, 0) %*% solve(A) %*% c(0, 0, 1)
solve(A) %*% c(8, 5, 4) / solve(A) %*% c(0, 0, 1)
A = matrix(c(2, 0, 1, 1, 1, -1, 0, 1, 0), nrow=3)
A
0 - c(4, -1, 0) %*% solve(A) %*% c(1, 0, 0)
0 - c(4, -1, 0) %*% solve(A) %*% c(0, 0, 1)
solve(A) %*% c(8, 5, 4) / solve(A) %*% c(0, 0, 1)
solve(A) %*% c(8, 5, 4) / solve(A) %*% c(1, 0, 0)
A = matrix(c(2, 0, 1, 0, 1, 0, 0, 0, 1), nrow=3)
A
-1 - c(4, 0, 0) %*% solve(A) %*% c(1, 1, -1)
0 - c(4, 0, 0) %*% solve(A) %*% c(1, 0, 0)
solve(A) %*% c(8, 5, 4)
solve(A) %*% c(8, 5, 4) / solve(A) %*% c(1, 1, -1)
A = matrix(c(2, 0, 1, 1, 1, -1, 0, 1, 0), nrow=3)
A
0 - c(4, -1, 0) %*% solve(A) %*% c(1, 0, 0)
0 - c(4, -1, 0) %*% solve(A) %*% c(0, 0, 1)
solve(A) %*% c(8, 5, 4)
solve(A) %*% c(8, 5, 4) / solve(A) %*% c(0, 0, 1)
A = matrix(c(2, 0, 1, 1, 1, -1, 0, 1, 0), nrow=3)
A
solve(A) %*% c(8, 5, 4)
library(astsa)
Z = arima.sim(n=100, model=list(order=c(1, 0, 0)), ar=-0.5, rand.gen=rnorm)
Z = arima.sim(n=100, model=list(order=c(1, 0, 0), ar=-0.5), rand.gen=rnorm)
ts.plot(Z)
Z = arima.sim(n=100, model=list(order=c(1, 0, 0)), ar=-0.5, rand.gen=rnorm) + 100
Z = arima.sim(n=100, model=list(order=c(1, 0, 0), ar=-0.5), rand.gen=rnorm) + 100
ts.plot(Z)
mean(Z)
std(Z)
stdev(Z)
sd(Z)
rm(list=ls())
library(astsa)
set.seed(1234)
z = arima.sim(n=100, model=;ist(order=c(1, 0, 0), ar=0.5), rand.gen=rnorm)
z = arima.sim(n=100, model=list(order=c(1, 0, 0), ar=0.5), rand.gen=rnorm)
z = arima.sim(n=100, model=list(order=c(1, 0, 0), ar=0.5), rand.gen=rnorm)
y = arima.sim(n=100, model=list(order=c(1, 0, 0), ar=-0.5), rand.gen=rnorm)
ts.plot(z, ylab="Z(t)", main=(expression(AR(1)~~phi==0.5)))
abline(h=0)
abline(h=0)
# 그림 6-2
ts.plot(y, ylab="Z(t)", main=(expression(AR(1)~~phi==-0.5)))
abline(h=0)
# 그림 6-6
ts.plot(z, yalb="z", main=(expression(MA(1)~~theta==-0.6)))
abline(h=0)
# 그림 6-6
set.seed(12347)
ts.plot(z, yalb="z", main=(expression(MA(1)~~theta==-0.6)))
abline(h=0)
z = arima.sim(n=100, list(order=c(0, 0, 1), ma=-0.6), rand.gen=rnorm)
ts.plot(z, yalb="z", main=(expression(MA(1)~~theta==-0.6)))
abline(h=0)
y = arima.sim(n=100, list(order=c(0, 0, 1), ma=0.6), rand.gen=rnorm)
# 그림 6-6
set.seed(12347)
z = arima.sim(n=100, list(order=c(0, 0, 1), ma=-0.6), rand.gen=rnorm)
y = arima.sim(n=100, list(order=c(0, 0, 1), ma=0.6), rand.gen=rnorm)
ts.plot(z, yalb="z", main=(expression(MA(1)~~theta==0.6)))
abline(h=0)
# 그림 6-7
ts.plot(y, yalb="z", main=(expression(MA(1)~~theta==-0.6)))
abline(h=0)
rm(list=ls())
library(astsa)
set.seed(1234)
z = arima.sim(n=100, model=list(order=c(1, 0, 0), ar=0.5), rand.gen=rnorm)
y = arima.sim(n=100, model=list(order=c(1, 0, 0), ar=-0.5), rand.gen=rnorm)
# 그림 6-1
ts.plot(z, ylab="Z(t)", main=(expression(AR(1)~~phi==0.5)))
abline(h=0)
# 그림 6-2
ts.plot(y, ylab="Z(t)", main=(expression(AR(1)~~phi==-0.5)))
abline(h=0)
# 그림 6-6
set.seed(12347)
z = arima.sim(n=100, list(order=c(0, 0, 1), ma=-0.6), rand.gen=rnorm)
y = arima.sim(n=100, list(order=c(0, 0, 1), ma=0.6), rand.gen=rnorm)
ts.plot(z, yalb="z", main=(expression(MA(1)~~theta==0.6)))
abline(h=0)
# 그림 6-7
ts.plot(y, yalb="z", main=(expression(MA(1)~~theta==-0.6)))
abline(h=0)
setwd("Workspace/2022-Fall_TimeSeriesAnalysis/")
par(family="AppleGothic")
# Figure 7-1
z = scan("data/depart.txt")
dept = ts(z, start=c(1984, 1), frequency=12)
ldept=log(dept)
dif_1 = diff(ldept, lag=1)
dif_12 = diff(ldept, lag=12)
dif_112 = diff(dif_1, lag=12)
ts.plot(dept, ylab="depart", main="그림 7-1 백화점 월별 매출액")
ts.plot(ldept, ylab="ln depart", main="그림 7-2 로그 매출액")
ts.plot(dif_1, ylab="diff 1", main="그림 7-5 1차 차분된 로그 매출액")
abline(h=0)
ts.plot(dif_12, ylab="diff 12", main="계절 차분된 로그 매출액")
ts.plot(dif_112, ylab="diff 1 & 12", main="그림 7-6 계절 차분된 로그 매출액")
abline(h=0)
# Figure 7-3
z = scan("data/interest.txt")
interest = ts(z, start=c(1982, 4), frequency=12)
ts.plot(interest, ylab="interest", main="그림 7-3 이자율")
abline(v=1992)
# Figure 7-4
set.seed(123456)
z = ts(cumsum(rnorm(100,.01, 1)))
difz = diff(z, lag=1)
par(mfrow=c(1, 2))
ts.plot(z, ylab="z", main="Random walk")
ts.plot(difz, ylab="diff z", main="1차 차분된 Rnadom walk")
# Figure 7.7~7.10
set.seed(16732)
par(mfrow=c(1, 1))
z = arima.sim(n=300, list(order=c(1,1,1), ar=0.8, ma=-0.5), rand.gen=rnorm)
# Figure 7.7
ts.plot(z, ylab="z", main=expression(ARIMA(1,1,1)~~~~~phi==0.8~~theta==0.5))
acf(z, maxlag=24, main="그림 7-8 ARMA(1, 1) 과정")
abline(h=0)
# Figure 7.7
ts.plot(z, ylab="z", main="그림 7-8 ARMA(1, 1, 1) 과정의 시계열을 1차 차분한 후의 시계열 그림")
# Figure 7.7
ts.plot(z, ylab="z", main="그림 7-8 ARMA(1, 1, 1) 과정의 시계열 그림")
# Figure 7.7~7.10
set.seed(16732)
par(mfrow=c(1, 1))
z = arima.sim(n=300, list(order=c(1,1,1), ar=0.8, ma=-0.5), rand.gen=rnorm)
par(mfrow=c(1, 2))
z = arima.sim(n=300, list(order=c(1,1,1), ar=0.8, ma=-0.5), rand.gen=rnorm)
# Figure 7.7
ts.plot(z, ylab="z", main="그림 7-7 ARMA(1, 1, 1) 과정의 시계열 그림")
acf(z, maxlag=24, main="그림 7-7 ARMA(1, 1, 1) 과정의 ACF")
# Figure 7.7
diff_z = diff(z, lag=1)
ts.plot(diff_z, ylab="z", main="그림 7-8 ARMA(1, 1, 1) 과정의 1차 차분한 후의 시계열 그림")
acf(diff_z, maxlag=24, main="그림 7-8 ARMA(1, 1, 1) 과정의 1차 차분한 후의 ACF")
# Exercise
library(fUnitRoots)
stationary_z_1 = arima.sim(n=100, list(order=c(1,0,0), ar=0.8))
adfTest(stationary_z_1)
ts.plot(stationary_z_1)
par(mfrow=c(1, 1))
stationary_z_1 = arima.sim(n=100, list(order=c(1,0,0), ar=0.8))
ts.plot(stationary_z_1)
ts.plot(stationary_z_1, main="정상 시계열 1, phi 0.8")
stationary_z_2 = arima.sim(n=100, list(order=c(2,0,0), ar=c(0.2, 0.2)))
ts.plot(stationary_z_1, main="정상 시계열 2, phi 0.2, 0.2")
stationary_z_2 = arima.sim(n=100, list(order=c(2,0,0), ar=c(0.2, 0.2)))
ts.plot(stationary_z_2, main="정상 시계열 2, phi 0.2, 0.2")
nonstationary_z_1 = arima.sim(model=list(order=c(0, 1, 0)), n=100)
ts.plot(nonstationary_z_1, main="비정상 시계열 1, random walk")
adfTest(nonstationary_z_1)
nonstationary_z_2 = arima.sim(model=list(order=c(0, 1, 0)), n=100, mean=1,sd=5)
ts.plot(nonstationary_z_2, main="비정상 시계열 2, random walk with intercept")
adfTest(nonstationary_z_2)
stationary_z_1 = arima.sim(n=100, list(order=c(1,0,0), ar=0.8))
adfTest(stationary_z_1)
stationary_z_2 = arima.sim(n=100, list(order=c(2,0,0), ar=c(0.2, 0.2)))
ts.plot(stationary_z_2, main="정상 시계열 2, phi 0.2, 0.2")
adfTest(stationary_z_2)
nonstationary_z_1 = arima.sim(model=list(order=c(0, 1, 0)), n=100)
ts.plot(nonstationary_z_1, main="비정상 시계열 1, random walk")
nonstationary_z_2 = arima.sim(model=list(order=c(0, 1, 0)), n=100, mean=1,sd=5)
adfTest(nonstationary_z_1)
nonstationary_z_2 = arima.sim(model=list(order=c(0, 1, 0)), n=100, mean=1,sd=5)
ts.plot(nonstationary_z_2, main="비정상 시계열 2, random walk with intercept")
adfTest(nonstationary_z_2)
